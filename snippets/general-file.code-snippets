{
    "UE_ACTOR_H": {
		"prefix": "ue-actor-header",
		"isFileTemplate": true,
		"body": [
			"// Fill out your copyright notice in the Description page of Project Settings.",
            "",
            "#pragma once",
            "",
            "#include \"CoreMinimal.h\"",
            "#include \"GameFramework/Actor.h\"",
            "#include \"$TM_FILENAME_BASE.generated.h\"",
            "",
            "UCLASS()",
            "class $0_API A$TM_FILENAME_BASE : public AActor",
            "{",
            "    GENERATED_BODY()",
            "",
            "public:",	
            "    A$TM_FILENAME_BASE();",
            "",
            "protected:",
            "   /* begin AActor implementation */",
            "   virtual void BeginPlay() override;",
	        "   virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override;",
            "   /* end AActor implementation */",
            "",
            "private:",
            "",
            "};"
		]
	},
    "UE_ACTOR_C": {
        "prefix": "ue_actor_code",
        "isFileTemplate": true,
        "body": [
            "#include \"$TM_FILENAME_BASE.h\"",
        ]
    },
    "GAMEPLAY_NATIVE_TAGS_H": {
        "prefix": "ue-gameplay-native-header",
        "isFileTemplate": true,
        "body": [
            "#pragma once",
            "",
            "#include \"CoreMinimal.h\"",
            "#include \"GameplayTagContainer.h\"",
            "#include \"GameplayTagsManager.h\"",
            "",
            "struct $0_API F$TM_FILENAME_BASE : public FGameplayTagNativeAdder",
            "{",
            "   FGameplayTag ${1:SomeGameplayTagVariable};",
            "",
            "   FORCEINLINE static const F$TM_FILENAME_BASE& Get() { return $TM_FILENAME_BASE; }",
            "",
            "protected:",
            "",
            "    virtual void AddTags() override",
            "    {",
            "        UGameplayTagsManager& Manager = UGameplayTagsManager::Get();",
            "",
            "        $1 = Manager.AddNativeGameplayTag(TEXT(\"${2:Some.Gameplay.Tag}\"));",
            "    }",
            "",
            "private:",
            "",
            "    static F$TM_FILENAME_BASE $TM_FILENAME_BASE;",
            "};",
        ]
    },
    "GAMEPLAY_NATIVE_TAGS_C": {
        "prefix": "ue-gameplay-native-code",
        "isFileTemplate": true,
        "body": [
            "#include \"$TM_FILENAME_BASE.h\"",
            "",
            "F$TM_FILENAME_BASE F$TM_FILENAME_BASE::$TM_FILENAME_BASE;",
        ]
    },
    "UObject_H": {
        "prefix": "ue-object-header",
        "isFileTemplate": true,
        "body": [
            "#pragma once",
            "",
            "#include \"CoreMinimal.h\"",
            "#include \"UObject/NoExportTypes.h\"",
            "#include \"$TM_FILENAME_BASE.generated.h\"",
            "",
            "/**",
            "* ",
            "*/",
            "UCLASS()",
            "class $0_API U$TM_FILENAME_BASE : public UObject",
            "{",
            "    GENERATED_BODY()",
            "public:",
            "",
            "protected:",
            "",
            "private:",
            "};",
        ]
    },
    "UObject_C": {
        "prefix": "ue-object-code",
        "isFileTemplate": true,
        "body": [
            "#include \"$TM_FILENAME_BASE.h\"",
        ]
    },
    "Actor_Component_header": {
        "prefix": "ue-actor-component-header",
        "isFileTemplate": true,
        "body": [
            "#pragma once",
            "",
            "#include \"CoreMinimal.h\"",
            "#include \"Components/ActorComponent.h\"",
            "#include \"$TM_FILENAME_BASE.generated.h\"",
            "",
            "UCLASS( ClassGroup=(Custom), meta=(BlueprintSpawnableComponent) )",
            "class $0_API U$TM_FILENAME_BASE : public UActorComponent",
            "{",
	        "    GENERATED_BODY()",
            "",
            "public:",	
	        "    // Sets default values for this component's properties",
	        "    U$TM_FILENAME_BASE();",
            "",
            "protected:",
	        "    // Called when the game starts",
	        "    virtual void BeginPlay() override;",
            "",
            "public:",	
	        "    // Called every frame",
	        "    virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;",
            "",
            "};"
        ]
    },
    "Actor_Component_code": {
        "prefix": "ue-actor-component-code",
        "isFileTemplate": true,
        "body": [
            "#include \"$TM_FILENAME_BASE.h\"",
            "",
            "// Sets default values for this component's properties",
            "U$TM_FILENAME_BASE::U$TM_FILENAME_BASE()",
            "{",
	        "    // Set this component to be initialized when the game starts, and to be ticked every frame.  You can turn these features",
	        "    // off to improve performance if you don't need them.",
	        "    PrimaryComponentTick.bCanEverTick = true;",
            "}",
            "",
            "// Called when the game starts",
            "void U$TM_FILENAME_BASE::BeginPlay()",
            "{",
	        "    Super::BeginPlay();",
            "}",
            "",
            "// Called every frame",
            "void U$TM_FILENAME_BASE::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)",
            "{",
	        "    Super::TickComponent(DeltaTime, TickType, ThisTickFunction);",
            "}"
        ]
    }
}